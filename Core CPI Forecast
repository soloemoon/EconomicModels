#----------------------------------------- Core CPI Model -----------------------------------------------#
''' 
  Inflation has autoregressive characteristics as it is largely based on expectation. This makes it suitable 
  for an ARIMA model. In this script CPI data is made stationary and an ARIMA model is used to forecast
  inflation over a 12 month forward basis.

'''
if (!require("dplyr")) {install.packages("dplyr"); library('dplyr')}
if (!require("forecast")) {install.packages("forecast"); library('forecast')}
if (!require("pdfetch")) {install.packages("pdfetch"); library('pdfetch')}
if (!require("lubridate")) {install.packages("lubridate"); library('lubridate')}
if (!require("xts")) {install.packages("xts"); library('xts')}
if (!require("urca")) {install.packages("urca"); library('urca')}
if (!require("ggplot2")) {install.packages("ggplot2"); library('ggplot2')}
if (!require("fredr")) {install.packages("fredr"); library('fredr')}
if (!require("scales")) {install.packages("scales"); library('scales')}
if (!require("purrr")) {install.packages("purrr"); library('purrr')}
if (!require("broom")) {install.packages("broom"); library('broom')}

#--------------------------------------------------------- Modeling Prep -------------------------------#
''' 
  Inflation data is imported and actual/forecast dates are derived. The data is then tested for stationarity
  and differenced based on the results of various tests.
'''
#--------------------------------------------------------------------------------------------------------#

# Import Data
CPI <-pdfetch_FRED('CPILFESL') %>% na.omit()

# Create actual dates and forecast dates later graphing.
dates <- index(CPI)
fc.dates <-seq(ceiling_date(tail(index(CPI),1)+1,"month"), length = 12, by ='1 month')-1

# Display graphs of data, ACF, and PACF - indicate transformation needed
ggtsdisplay(CPI)

# Determine if data is stationary. Test statistic > 1pct critical value. 
# Reject null hypothesis indicating data not stationary and needs differencing
CPI %>% ur.kpss() %>% summary() 

# Determine order of differencing needed to make data stationary
differencing.order <-ndiffs(CPI)

# Second Order Differenced data stationary testing. Test statistics and p-values shouldbe small indicating the null hypothesis should be accepted
CPI %>% diff(differences=differencing.order) %>% ur.kpss() %>% summary() 

CPI %>% diff(differences=differencing.order) %>% ggtsdisplay()

Box.test(diff(CPI$CPILFESL, differences = 2),type='Ljung-Box')

#--------------------------------------------------- Build Model -----------------------------------#
''' 
 Model inputs are defined and the model is built and validated.Stepwise evaluation and approxmination are turned off to 
 enhance the precision of the model selection process. Seasonality is set to FALSE as inflation data does not show any
 seasonal characteristics.
 
 Validation plots are used to validate model.
 
 Stepwise model selection is used to control model selection speed
 Approximation model selection controls the precision of the model selection
 Seasonlity determines if seasonality is used in ARIMA model.
'''
#---------------------------------------------------------------------------------------------------#

model.options <-data.frame(stepwise = FALSE, approximation = FALSE, seasonality = FALSE)

# ARIMA Model: <= 10 lags. pValue > .203 Arima(4,2,1) <- subject to change
cpi.model <-auto.arima(CPI, d=differencing.order,stepwise = model.options$stepwise, approximation = model.options$approximation, seasonal = model.options$seasonality)

autoplot(cpi.model) # All should be within unit circle

tidy(cpi.model)
glance(cpi.model)

checkresiduals(cpi.model) # Autocorrelations in threshold limit and large p value indicating white noise residuals

#------------------------------------------------------ Forecast Inflation ------------------------------------------------#
''' 
  Compare actual vs fitted values. Use Fitted ARIMA model to forecast inflation over the next 12 months. Actual and Forecasted
  inflation are combined into a single dataframe and year-over-year rates are calculated. Actual v Forecast is graphed.
'''
#--------------------------------------------------------------------------------------------------------------------------#

# Actual v Fitted Values
ggplot()+theme_light()+
  geom_line(aes(x=tail(index(CPI), 60), y=tail(CPI$CPILFESL,60), color='Actual'))+
  geom_line(aes(x=tail(index(CPI), 60), y=tail(fitted(cpi.model),60), color='Fitted'))+
  labs(y='Index',x='Date',title='CPI: Actual vs Predicted',caption='ARIMA(4,2,1)')

# 12 month CPI forecast
cpi.forecast <-cpi.model %>% forecast(h=12)

# Build Forecasted values time series
cpi.forecast<-data.frame(CPILFESL = cpi.forecast$mean,Date= fc.dates)
cpi.forecast <-xts(x=cpi.forecast$CPILFESL, order.by = cpi.forecast$Date)
names(cpi.forecast) <-'CPILFESL'

# Append Forecasted values to DataFrame
CPI <-append(CPI,cpi.forecast, after=length(CPI))

# Calculate YoY rates
CPI <-data.frame((CPI$CPILFESL/lag(CPI$CPILFESL,12)-1)*100) %>% na.omit()
CPI$CPILFESL <-round(CPI$CPILFESL,1)
CPI$date <-as.Date(rownames(CPI))
CPI <-subset(CPI, date >= Sys.Date() - 730)

# Plot Actuals with Forecast
ggplot()+theme_light()+
  geom_line(aes(x=dates[dates %in% CPI$date], y = CPI$CPILFESL[CPI$date %in% dates[dates %in% CPI$date]], color='Actual'))+
  geom_line(aes(x=fc.dates, y= CPI$CPILFESL[CPI$date %in% fc.dates], color='Forecast'))+
  scale_color_manual(labels = c('Actual','Forecast'), values=c('#003D73', '#5E9732'))+
  scale_x_date(labels = date_format('%b%y'))+
  labs(y='%',x='',title='Core CPI',subtitle = '12 month forecast',caption='Model: ARIMA(4,2,1)')+
  theme(legend.position='top',legend.justification = 'center',panel.grid.major.x =element_blank(),panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_line(size=.1, color="grey"),
        panel.grid.minor.y = element_blank(),
        plot.title=element_text(face = 'bold', hjust=0),
        axis.title = element_text(face='bold',size=12,vjust=-0.5),
        legend.title=element_blank(),
        axis.text = element_text(color='black',size=12),
        plot.subtitle = element_text(size=11,hjust=0),
        legend.text = element_text(size=12),
        plot.caption = element_text(size=10),
        title = element_text(size=12),
        panel.border = element_rect(color='black', fill=NA, size = .5))
